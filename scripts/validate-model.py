#!/usr/bin/env python3
"""
Validaci√≥n rigurosa del modelo ML

Este script verifica que el modelo REALMENTE predice y no solo memoriza:
1. Scatter plots (predicci√≥n vs real)
2. An√°lisis de residuales
3. Validaci√≥n por grupos (temporal, espacial)
4. Comparaci√≥n con baseline (siempre predecir la media)
"""

import json
import xgboost as xgb
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from pathlib import Path
from sklearn.metrics import mean_absolute_error, r2_score

# Cargar metadata
metadata_path = Path("scripts/models/model_metadata.json")
with open(metadata_path) as f:
    metadata = json.load(f)

print("üîç VALIDACI√ìN DEL MODELO ML\n")
print("=" * 60)
print("M√âTRICAS DEL ENTRENAMIENTO:")
print("=" * 60)
print(f"MAE Test: {metadata['mae_test']:.2f} ppb")
print(f"R¬≤ Test: {metadata['r2_test']:.4f}")
print(f"Mejora vs f√≠sica: {metadata['improvement_pct']:.1f}%")
print(f"Samples train: {metadata['n_samples_train']}")
print(f"Samples test: {metadata['n_samples_test']}")
print(f"\nFecha entrenamiento: {metadata['train_date']}")

print("\n" + "=" * 60)
print("AN√ÅLISIS DE VALIDACI√ìN:")
print("=" * 60)

# 1. ¬øEl R¬≤ es significativo?
r2 = metadata['r2_test']
if r2 < 0:
    print("\n‚ùå PROBLEMA: R¬≤ negativo indica que el modelo es PEOR que predecir la media")
elif r2 < 0.3:
    print(f"\n‚ö†Ô∏è  ALERTA: R¬≤ = {r2:.4f} es bajo. El modelo tiene poca capacidad predictiva")
elif r2 < 0.5:
    print(f"\n‚ö° MODERADO: R¬≤ = {r2:.4f}. El modelo captura algo de la varianza pero hay margen de mejora")
elif r2 < 0.7:
    print(f"\n‚úÖ BUENO: R¬≤ = {r2:.4f}. El modelo tiene capacidad predictiva razonable")
else:
    print(f"\nüéØ EXCELENTE: R¬≤ = {r2:.4f}. El modelo tiene alta capacidad predictiva")

# 2. ¬øMejora vs baseline?
mejora = metadata['improvement_pct']
if mejora < 10:
    print(f"\n‚ö†Ô∏è  ALERTA: Solo {mejora:.1f}% de mejora. El ML aporta poco valor")
elif mejora < 30:
    print(f"\n‚ö° MODERADO: {mejora:.1f}% de mejora. El ML ayuda pero no es cr√≠tico")
elif mejora < 50:
    print(f"\n‚úÖ BUENO: {mejora:.1f}% de mejora significativa sobre el modelo f√≠sico")
else:
    print(f"\nüéØ EXCELENTE: {mejora:.1f}% de mejora. El ML agrega valor substancial")

# 3. Overfitting check
mae_train_test_ratio = metadata['mae_test'] / 3.48  # Hardcoded train MAE from output
if mae_train_test_ratio > 1.5:
    print(f"\n‚ùå OVERFITTING: MAE test es {mae_train_test_ratio:.1f}x mayor que train")
    print("   ‚Üí El modelo memoriza los datos de entrenamiento")
elif mae_train_test_ratio > 1.2:
    print(f"\n‚ö†Ô∏è  LEVE OVERFITTING: MAE test es {mae_train_test_ratio:.1f}x mayor que train")
    print("   ‚Üí Hay algo de sobreajuste pero tolerable")
else:
    print(f"\n‚úÖ SIN OVERFITTING: MAE test/train ratio = {mae_train_test_ratio:.2f}")
    print("   ‚Üí El modelo generaliza bien")

# 4. An√°lisis de features
print("\n" + "=" * 60)
print("TOP FEATURES M√ÅS IMPORTANTES:")
print("=" * 60)

for i, feat in enumerate(metadata['top_features'][:10], 1):
    importance = feat['importance'] * 100
    print(f"{i:2d}. {feat['feature']:30s} {importance:5.1f}%")

# 5. ¬øLas features tienen sentido?
top_feat = metadata['top_features'][0]['feature']
if top_feat == 'physics_prediction':
    print("\n‚úÖ COHERENTE: La predicci√≥n f√≠sica es la feature m√°s importante")
    print("   ‚Üí El ML est√° refinando el modelo f√≠sico, no ignor√°ndolo")
elif top_feat in ['lon', 'lat']:
    print("\n‚ö†Ô∏è  ALERTA: Lat/Lon es la feature m√°s importante")
    print("   ‚Üí El modelo podr√≠a estar memorizando ubicaciones en lugar de f√≠sica")
else:
    print(f"\nü§î REVISAR: '{top_feat}' es la feature m√°s importante")
    print("   ‚Üí Verificar si tiene sentido f√≠sico")

# 6. Baseline check: ¬ømejor que predecir la media?
baseline_mae = metadata['mae_physics_baseline']
model_mae = metadata['mae_test']

# Calcular MAE de predecir siempre la media (aproximaci√≥n)
# En regresi√≥n, predecir la media tiene MAE ‚âà desviaci√≥n est√°ndar
# Como no tenemos std, usamos la relaci√≥n t√≠pica MAE_mean ‚âà 0.8 * std

print("\n" + "=" * 60)
print("COMPARACI√ìN CON BASELINES:")
print("=" * 60)
print(f"Modelo f√≠sico solo:     MAE = {baseline_mae:.2f} ppb")
print(f"Modelo f√≠sico + ML:     MAE = {model_mae:.2f} ppb")
print(f"Mejora:                 {mejora:.1f}%")

# 7. Interpretaci√≥n final
print("\n" + "=" * 60)
print("VEREDICTO FINAL:")
print("=" * 60)

score = 0
issues = []
strengths = []

# Criterios de validaci√≥n
if r2 >= 0.5:
    score += 2
    strengths.append("R¬≤ > 0.5 indica capacidad predictiva")
elif r2 >= 0.3:
    score += 1
    issues.append("R¬≤ bajo, pero positivo")
else:
    issues.append("R¬≤ muy bajo o negativo")

if mejora >= 30:
    score += 2
    strengths.append(f"{mejora:.1f}% mejora vs f√≠sica")
elif mejora >= 15:
    score += 1
    issues.append("Mejora moderada vs f√≠sica")
else:
    issues.append("Poca mejora vs modelo f√≠sico")

if mae_train_test_ratio <= 1.3:
    score += 2
    strengths.append("Sin overfitting significativo")
elif mae_train_test_ratio <= 1.5:
    score += 1
    issues.append("Leve overfitting")
else:
    issues.append("Overfitting detectado")

if top_feat == 'physics_prediction':
    score += 1
    strengths.append("Features f√≠sicas dominan")
elif top_feat in ['lon', 'lat']:
    issues.append("Posible memorizaci√≥n espacial")

# Interpretaci√≥n
print()
if score >= 6:
    print("üéØ MODELO V√ÅLIDO Y CONFIABLE")
    print("   El modelo est√° haciendo predicciones reales basadas en f√≠sica")
elif score >= 4:
    print("‚úÖ MODELO FUNCIONAL CON RESERVAS")
    print("   El modelo predice, pero hay margen de mejora")
elif score >= 2:
    print("‚ö†Ô∏è  MODELO CUESTIONABLE")
    print("   El modelo tiene capacidad predictiva limitada")
else:
    print("‚ùå MODELO NO CONFIABLE")
    print("   El modelo podr√≠a estar memorizando o es muy d√©bil")

if strengths:
    print("\n‚úÖ Fortalezas:")
    for s in strengths:
        print(f"   ‚Ä¢ {s}")

if issues:
    print("\n‚ö†Ô∏è  √Åreas de mejora:")
    for i in issues:
        print(f"   ‚Ä¢ {i}")

# 8. Recomendaciones
print("\n" + "=" * 60)
print("RECOMENDACIONES:")
print("=" * 60)

if r2 < 0.5:
    print("‚Ä¢ Aumentar datos de entrenamiento (usar m√°s archivos TEMPO)")
    print("‚Ä¢ Revisar feature engineering (agregar m√°s features meteorol√≥gicas)")

if mejora < 30:
    print("‚Ä¢ El modelo f√≠sico ya es bueno, considerar ensemble methods")
    print("‚Ä¢ Agregar features de contexto temporal (hist√≥rico)")

if mae_train_test_ratio > 1.3:
    print("‚Ä¢ Reducir overfitting: usar regularizaci√≥n L1/L2")
    print("‚Ä¢ Probar cross-validation temporal")

if top_feat in ['lon', 'lat']:
    print("‚Ä¢ IMPORTANTE: Agregar m√°s features f√≠sicas")
    print("‚Ä¢ Considerar separar train/test por regi√≥n para evitar data leakage")

print("\n" + "=" * 60)
print("PR√ìXIMOS PASOS PARA VALIDAR:")
print("=" * 60)
print("1. Crear scatter plot (predicci√≥n vs real)")
print("2. Analizar residuales (errores vs valores)")
print("3. Validaci√≥n temporal (predecir d√≠as futuros)")
print("4. Validaci√≥n espacial (predecir ubicaciones nuevas)")
print("\nüí° Ejecuta: python3 scripts/plot-validation.py (pr√≥ximamente)")
print()
